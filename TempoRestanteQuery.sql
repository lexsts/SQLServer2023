--Actual execution
SELECT t.text,a.status,
  sp.loginame,
  last_wait_type,
  start_time,
  percent_complete,
  command,
  b.name AS DatabaseName,  
  datediff(mi,start_time,getdate()) MinutesRunning_ok,
  --(total_elapsed_time/1000/60) AS MinutesRunning,
  (estimated_completion_time/1000/60) AS MinutesToFinish,
  DATEADD(ms,estimated_completion_time,GETDATE()) AS StimatedCompletionTime,  
  total_elapsed_time AS total_elapsed_time,
  *
FROM  
  sys.dm_exec_requests a
  INNER JOIN sys.databases b ON a.database_id = b.database_id
  INNER JOIN sys.sysprocesses sp ON sp.spid = a.session_id
  cross apply sys.dm_exec_sql_text(a.sql_handle) t
WHERE 
  --b.name = 'OP'/*

 --session_id = 61 or
  estimated_completion_time > 0 or
  (total_elapsed_time/1000/60) > 0
		
--*/
order by datediff(mi,start_time,getdate())




--Time procedures
/*INSERT INTO TB_TIME_PROCS_DETAILS (
  DATABASE_NAME,
  PROCEDURE_NAME,
  LAST_EXECUTION_TIME,
  ELAPSED_TIME,
  AVG_ELAPSED_TIME,
  LAST_ELAPSED_TIME,
  EXECUTION_COUNT,
  DT_COLETA,
  DBID,
  OBJECTID,
  TOTAL_ELAPSED_TIME,
  TOTAL_EXECUTION_COUNT,
  PLAN_HANDLE,
  TOTAL_WORKER_TIME,
  LAST_WORKER_TIME,
  MIN_WORKER_TIME,
  MAX_WORKER_TIME,
  TOTAL_PHYSICAL_READS,
  LAST_PHYSICAL_READS,
  TOTAL_LOGICAL_WRITES,
  LAST_LOGICAL_WRITES,
  TOTAL_LOGICAL_READS,
  LAST_LOGICAL_READS,
  WORKER_TIME,
  PHYSICAL_READS,
  LOGICAL_WRITES,
  LOGICAL_READS
  )
*/
SELECT   
  DB_NAME(DATABASE_ID) DBNAME, 
  OBJECT_NAME(OBJECT_ID, DATABASE_ID) 'PROC NAME', 
  D.LAST_EXECUTION_TIME, 
  CASE 
    WHEN D.TOTAL_ELAPSED_TIME < TB_TIME_PROCS_DETAILS.TOTAL_ELAPSED_TIME THEN D.TOTAL_ELAPSED_TIME
    ELSE D.TOTAL_ELAPSED_TIME - TB_TIME_PROCS_DETAILS.TOTAL_ELAPSED_TIME 
  END TOTAL_ELAPSED_TIME_PERIOD,
  CASE
    WHEN D.TOTAL_ELAPSED_TIME < TB_TIME_PROCS_DETAILS.TOTAL_ELAPSED_TIME THEN D.TOTAL_ELAPSED_TIME / D.EXECUTION_COUNT
    ELSE (D.TOTAL_ELAPSED_TIME - TB_TIME_PROCS_DETAILS.TOTAL_ELAPSED_TIME) / 
																	 CASE 
                                                                       WHEN (D.EXECUTION_COUNT - TB_TIME_PROCS_DETAILS.TOTAL_EXECUTION_COUNT) <= 0 THEN 1 
                                                                       ELSE (D.EXECUTION_COUNT - TB_TIME_PROCS_DETAILS.TOTAL_EXECUTION_COUNT)
                                                                     END
  END [AVG_ELAPSED_TIME],
  D.LAST_ELAPSED_TIME, 
  CASE 
    WHEN D.EXECUTION_COUNT < TB_TIME_PROCS_DETAILS.TOTAL_EXECUTION_COUNT THEN D.EXECUTION_COUNT
    ELSE D.EXECUTION_COUNT - TB_TIME_PROCS_DETAILS.TOTAL_EXECUTION_COUNT 
  END EXECUTION_COUNT,
  GETDATE(),
  DATABASE_ID,
  OBJECT_ID,
  D.TOTAL_ELAPSED_TIME,
  D.EXECUTION_COUNT,
  D.PLAN_HANDLE,
  D.TOTAL_WORKER_TIME,
  D.LAST_WORKER_TIME,
  D.MIN_WORKER_TIME,
  D.MAX_WORKER_TIME,
  D.TOTAL_PHYSICAL_READS,
  D.LAST_PHYSICAL_READS,
  D.TOTAL_LOGICAL_WRITES,
  D.LAST_LOGICAL_WRITES,
  D.TOTAL_LOGICAL_READS,
  D.LAST_LOGICAL_READS,
  CASE 
    WHEN D.TOTAL_WORKER_TIME < ISNULL(TB_TIME_PROCS_DETAILS.TOTAL_WORKER_TIME,0) THEN D.TOTAL_WORKER_TIME
    ELSE D.TOTAL_WORKER_TIME - ISNULL(TB_TIME_PROCS_DETAILS.TOTAL_WORKER_TIME,0) 
  END WORKER_TIME,
  CASE 
    WHEN D.TOTAL_PHYSICAL_READS < ISNULL(TB_TIME_PROCS_DETAILS.TOTAL_PHYSICAL_READS,0) THEN D.TOTAL_PHYSICAL_READS
    ELSE D.TOTAL_PHYSICAL_READS - ISNULL(TB_TIME_PROCS_DETAILS.TOTAL_PHYSICAL_READS,0) 
  END PHYSICAL_READS,
  CASE 
    WHEN D.TOTAL_LOGICAL_WRITES < ISNULL(TB_TIME_PROCS_DETAILS.TOTAL_LOGICAL_WRITES,0) THEN D.TOTAL_LOGICAL_WRITES
    ELSE D.TOTAL_LOGICAL_WRITES - ISNULL(TB_TIME_PROCS_DETAILS.TOTAL_LOGICAL_WRITES,0) 
  END LOGICAL_WRITES,
  CASE 
    WHEN D.TOTAL_LOGICAL_READS < ISNULL(TB_TIME_PROCS_DETAILS.TOTAL_LOGICAL_READS,0) THEN D.TOTAL_LOGICAL_READS
    ELSE D.TOTAL_LOGICAL_READS - ISNULL(TB_TIME_PROCS_DETAILS.TOTAL_LOGICAL_READS,0) 
  END LOGICAL_READS
FROM 
  SYS.DM_EXEC_PROCEDURE_STATS AS D
  INNER JOIN TB_TIME_PROCS_DETAILS ON TB_TIME_PROCS_DETAILS.DBID = D.DATABASE_ID AND
								      TB_TIME_PROCS_DETAILS.OBJECTID = D.OBJECT_ID
  INNER JOIN
  (
	SELECT
	  MAX(ID) MAX_ID,
	  DBID,
	  OBJECTID
	FROM   
	  TB_TIME_PROCS_DETAILS
	GROUP BY
	  DBID,
	  OBJECTID  
  )  MAX_TB_TIME_PROCS_DETAILS ON MAX_TB_TIME_PROCS_DETAILS.DBID = TB_TIME_PROCS_DETAILS.DBID AND
								  MAX_TB_TIME_PROCS_DETAILS.OBJECTID = TB_TIME_PROCS_DETAILS.OBJECTID AND
								  MAX_TB_TIME_PROCS_DETAILS.MAX_ID = TB_TIME_PROCS_DETAILS.ID  

